// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int? // Specific to some providers like Keycloak

  @@unique([provider, providerAccountId])
  @@index([userId]) // Added for faster lookups by userId
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Added for faster lookups by userId
}

model User {
  id            String    @id @default(cuid()) // ユーザーID (CUIDをデフォルトに)
  name          String?   // ユーザー名 (NextAuth.js標準)
  email         String    @unique // メールアドレス (ユニーク制約)
  emailVerified DateTime? // メール認証日時 (NextAuth.js標準)
  image         String?   // アイコン画像のURL (NextAuth.js標準)
  
  // 追加のカスタムフィールド
  pwHash        String?   // ハッシュ化されたパスワード (認証用)
  createdAt     DateTime  @default(now()) // 作成日時
  updatedAt     DateTime  @updatedAt // 更新日時

  // NextAuth.jsで必要なリレーション
  accounts      Account[] // アカウント情報 (1対多リレーション)
  sessions      Session[] // セッション情報 (1対多リレーション)

  profile       Profile?  // ユーザープロフィール (1対1リレーション)
  stories       Story[]   // 作成した自分史エピソード (1対多リレーション)
  family        Family?   // 発行した家族ID (1対1リレーション)
  sentFamilyRequests    FamilyMembership[] @relation("SentRequests")   // 送信した家族申請
  receivedFamilyRequests FamilyMembership[] @relation("ReceivedRequests") // 受信した家族申請 (承認する側)
  familyMemberships     FamilyMembership[] @relation("UserMemberships")  // 所属する家族グループ (自分がメンバーとして承認されたもの)
  familyId      String?   @unique
  uploadedImages Image[]   // アップロードした画像
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- 👇 New Models for pick-buyAI ---

// ユーザープロフィール (MVPではUserモデルに統合も可だが、将来的な拡張のため分離も検討)
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique // Userモデルとの紐付け (ユニーク)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Userへのリレーション
  bio       String?  // 自己紹介文 (任意)
  birthDate DateTime? // 生年月日 (任意)
  // その他プロフィール項目
}

// 自分史エピソード
model Story {
  id            String       @id @default(cuid())
  title         String
  body          String       @db.Text
  eventDate     DateTime?
  lifeEventTag  LifeEventTag?
  visibility    Visibility   @default(PRIVATE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  authorId      String
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images        StoryImage[] // 画像との多対多リレーション
  
  @@map("stories")
}

// 画像管理テーブル
model Image {
  id            String       @id @default(cuid())
  filename      String       // オリジナルファイル名
  url           String       // ストレージURL（S3/Cloudinary等）
  thumbnailUrl  String?      // サムネイルURL
  alt           String?      // 代替テキスト
  caption       String?      // キャプション
  mimeType      String       // image/jpeg, image/png等
  fileSize      Int          // ファイルサイズ（バイト）
  width         Int?         // 画像幅
  height        Int?         // 画像高さ
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  uploaderId    String
  uploader      User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  stories       StoryImage[] // ストーリーとの多対多リレーション
  
  @@map("images")
}

// Story-Image中間テーブル
model StoryImage {
  id        String   @id @default(cuid())
  order     Int      @default(0) // 画像の表示順序
  createdAt DateTime @default(now())
  
  // Relations
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, imageId])
  @@map("story_images")
}

// 家族ID (ユーザーが発行するもの)
model Family {
  id             String   @id @default(cuid())
  familyIdString String   @unique @default(uuid()) // 家族に共有するための一意なID文字列 (UUIDをデフォルトに)
  createdAt      DateTime @default(now())

  ownerId String @unique // この家族IDを発行したユーザーID
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members FamilyMembership[] @relation("FamilyGroup") // この家族IDに紐づくメンバーシップ
}

// 家族メンバーシップ (申請と承認の状態を管理)
model FamilyMembership {
  id        String   @id @default(cuid())
  status    FamilyMembershipStatus @default(PENDING) // 申請ステータス (Enum)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 申請者 (このユーザーが targetFamilyOwnerUserId の家族グループに入りたい)
  requesterId String
  requester   User   @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)

  // 申請先の家族IDのオーナー (このユーザーが承認/拒否する)
  targetFamilyOwnerId String
  targetFamilyOwner   User   @relation("ReceivedRequests", fields: [targetFamilyOwnerId], references: [id], onDelete: Cascade)

  // 実際に紐づくFamily (承認された場合)
  // 承認後、requesterId が targetFamilyOwnerId の Family に所属する、という関係を示す
  // より直接的な関係性を示すために、Familyモデルへのリレーションも持つ
  familyId String? // 承認された場合に、対象のFamilyのIDを格納
  family   Family?  @relation("FamilyGroup", fields: [familyId], references: [id], onDelete:SetNull)

  // 承認されたメンバーであることを示すため、Userモデルにもリレーションを持つ
  memberUserId String? // 承認されたユーザーID (requesterId と同じ)
  memberUser   User?    @relation("UserMemberships", fields: [memberUserId], references: [id], onDelete:SetNull)

  @@unique([requesterId, targetFamilyOwnerId]) // 同じ組み合わせの申請は1つだけ
}


// Enum定義
enum LifeEventTag {
  BIRTH
  CHILDHOOD
  STUDENT_DAYS
  FIRST_JOB
  CAREER_CHANGE
  MARRIAGE
  CHILDBIRTH
  PARENTING
  HOBBY
  TRAVEL
  TURNING_POINT
  HEALTH
  OTHER
}

enum Visibility {
  PRIVATE     // 自分のみ
  FAMILY_ONLY // 家族のみ
  // PUBLIC   // 全体公開 (将来の拡張)
}

enum FamilyMembershipStatus {
  PENDING   // 申請中
  APPROVED  // 承認済み
  REJECTED  // 拒否
  // BLOCKED // ブロック (将来の拡張)
}