// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Existing models with potential modifications below
model Post {
  id        Int      @id @default(autoincrement())
  name      String // This seems like a generic "Post". We might want more specific content models.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // üëá pick-buyAI specific additions for a generic "Post" if used for creative outputs
  projectId   Int?     // Link to a Project
  project     Project? @relation(fields: [projectId], references: [id])
  contentType String?  // e.g., "blog_article", "short_story", "image_prompt_result"
  content     Json?    // Store actual content, prompts, or metadata related to the post
  visibility  String   @default("private") // "private", "unlisted", "public"
  tags        String[] // For discoverability

  @@index([name])
  @@index([createdById])
  @@index([projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int? // Specific to some providers like Keycloak

  @@unique([provider, providerAccountId])
  @@index([userId]) // Added for faster lookups by userId
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Added for faster lookups by userId
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  pwHash        String?   // Consider if you are only using OAuth or also email/pw
  accounts      Account[]
  sessions      Session[]
  posts         Post[] // Potentially rename or make more specific depending on content strategy

  // üëá pick-buyAI specific additions
  projects            Project[]             // User's creative projects
  aiInteractions      AiInteractionLog[]    // Log of interactions with AI features
  preferences         UserPreference?       // User-specific settings for pick-buyAI
  Subscription        Subscription?         // User's subscription status
  credits             Int                   @default(0) // For freemium model, AI generation credits
  lastCreditReset     DateTime?             // When credits were last reset (for monthly free credits)
  interests           String[]              // For personalization (e.g., "illustration", "writing")
  skillLevel          String?               // e.g., "beginner", "intermediate", "advanced"
  currentStreak       Int                   @default(0) // For gamification
  longestStreak       Int                   @default(0) // For gamification
  experiencePoints    Int                   @default(0) // For gamification / leveling
  badges              Badge[]               @relation("UserBadges") // Earned badges
  onboardingCompleted Boolean               @default(false)
  
  // üëá New relations for quests and social features
  questProgress       UserQuestProgress[]
  sharedWorks         SharedWork[]
  comments            Comment[]
  likes               Like[]

  // PickBuyËøΩÂä†„Éï„Ç£„Éº„É´„Éâ
  role            String    @default("user")  // user, producer, admin
  bio             String?   @db.Text
  phoneNumber     String?
  address         Json?
  socialLinks     Json?     // SNS„É™„É≥„ÇØÊÉÖÂ†±
  verifiedSeller  Boolean   @default(false)
  bankAccount     Json?     // ÈäÄË°åÂè£Â∫ßÊÉÖÂ†±ÔºàË≤©Â£≤ËÄÖÁî®Ôºâ
  has_seen_tutorial Boolean @default(false)  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´Ë°®Á§∫„Éï„É©„Ç∞
  
  // PickBuyÈñ¢ÈÄ£„É™„É¨„Éº„Ç∑„Éß„É≥
  products        Product[]
  livestreams     LiveStream[]
  chatMessages    ChatMessage[]
  orders          Order[]
  reviews         Review[]
  analytics       Analytics[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- üëá New Models for pick-buyAI ---

// Represents a creative project a user is working on
model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      String    @default("draft") // e.g., "draft", "in_progress", "completed", "archived"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectType String?   // e.g., "illustration_series", "short_story_collection", "game_concept"
  visibility  String    @default("private") // "private", "unlisted", "public_template" (if sharable)
  tags        String[]
  coverImage  String?   // URL to a cover image for the project

  // Relations to content within the project
  projectAssets ProjectAsset[]
  posts         Post[] // If posts are part of a project
  aiSessions    AiInteractionLog[] @relation("ProjectAiSessions")
  sharedWorks   SharedWork[] // üëá New relation for shared works from this project

  @@index([userId])
  @@index([title])
}

// Represents individual assetspolling within a project (images, text snippets, audio, etc.)
model ProjectAsset {
  id          Int      @id @default(autoincrement())
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assetType   String   // e.g., "image", "text_document", "audio_clip", "video_snippet", "ai_prompt"
  fileName    String?
  fileUrl     String?  // URL if stored externally (e.g., S3)
  content     Json?    // For text content, prompts, or metadata
  mimeType    String?
  size        Int?     // File size in bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  notes       String?  // User notes for this asset

  // Relation to AI interactions if this asset was AI-generated or assisted
  aiInteractionId String?
  aiInteraction   AiInteractionLog? @relation(fields: [aiInteractionId], references: [id])
  sharedWorks     SharedWork[] // üëá New relation for shared works containing this asset

  @@index([projectId])
  @@index([assetType])
}

// Logs interactions with AI features (Rubber Duck AI, generation, etc.)
model AiInteractionLog {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId        Int?      // Optional: if interaction is tied to a specific project
  project          Project?  @relation("ProjectAiSessions", fields: [projectId], references: [id])
  interactionType  String    // e.g., "rubber_duck_chat", "image_generation", "text_completion", "style_transfer"
  prompt           String?   @db.Text // User's input/prompt
  response         Json?     // AI's response (can be text, image URLs, JSON data)
  modelUsed        String?   // e.g., "gpt-4o", "dall-e-3", "stable-diffusion-3"
  cost             Float?    // Cost of this interaction (if applicable, for tracking)
  durationMs       Int?      // Duration of the interaction
  userFeedback     Int?      // e.g., 1-5 star rating, or thumbs up/down
  notes            String?   // User notes on this interaction
  createdAt        DateTime  @default(now())
  generatedAssets  ProjectAsset[] // Assets generated from this interaction

  @@index([userId])
  @@index([projectId])
  @@index([interactionType])
}

// User-specific preferences for pick-buyAI
model UserPreference {
  id                      String  @id @default(cuid())
  userId                  String  @unique // One-to-one with User
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultAiModel          String? // User's preferred default AI model for a certain task
  defaultProjectVisibility String @default("private")
  notificationSettings    Json?   // e.g., { "new_feature_updates": true, "community_mentions": false }
  uiTheme                 String  @default("light") // "light", "dark", "system"
  language                String  @default("en")    // User's preferred language for the UI
  creativeFields          String[] // Primary creative fields user is interested in
  updatedAt               DateTime @updatedAt
}

// Subscription model for paid features
model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique // One-to-one with User
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId             String    // e.g., "free", "pick-buyai_plus_monthly", "pick-buyai_plus_yearly"
  status             String    // e.g., "active", "canceled", "past_due", "trialing"
  stripeCustomerId   String?   @unique // From Stripe or other payment provider
  stripeSubscriptionId String? @unique // From Stripe or other payment provider
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  cancelAtPeriodEnd  Boolean   @default(false)
}

// For gamification - badges users can earn
model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  iconUrl     String?
  criteria    Json?    // How this badge is earned (e.g., {"quest_id": 123, "min_interactions": 50})
  users       User[]   @relation("UserBadges")
  quests      Quest[]  // üëá New relation for quests that reward this badge
  createdAt   DateTime @default(now())
}

// For "Creative Quests" or challenges
model Quest {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  rewardPoints   Int?
  rewardBadgeId  Int?
  rewardBadge    Badge?   @relation(fields: [rewardBadgeId], references: [id])
  criteria       Json     // e.g., {"action": "generate_image", "count": 5, "theme": "spring"}
  isActive       Boolean  @default(true)
  startDate      DateTime?
  endDate        DateTime?
  questType      String   // "daily", "weekly", "event", "tutorial"
  userProgress   UserQuestProgress[]
  createdAt      DateTime @default(now())
}

model UserQuestProgress {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questId     Int
  quest       Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  progress    Json     // e.g., {"generated_images_spring": 3}
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  updatedAt   DateTime @updatedAt

  @@unique([userId, questId])
  @@index([userId])
}

// For Community Gallery / Sharing
model SharedWork {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      Int?     // Optional: if shared from a project
  project        Project? @relation(fields: [projectId], references: [id])
  assetId        Int?     // Optional: if a specific asset is shared
  projectAsset   ProjectAsset? @relation(fields: [assetId], references: [id])
  contentUrl     String?  // If direct URL for image/video
  textContent    String? @db.Text // If sharing text
  tags           String[]
  visibility     String   @default("public") // "public", "unlisted"
  allowComments  Boolean  @default(true)
  allowRemixing  Boolean  @default(false) // If others can use this as a base
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  likesCount     Int      @default(0)
  viewsCount     Int      @default(0)
  comments       Comment[]
  likes          Like[]

  @@index([userId])
  @@index([tags])
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWorkId Int
  sharedWork   SharedWork @relation(fields: [sharedWorkId], references: [id], onDelete: Cascade)
  parentId     Int?     // For threaded comments
  parent       Comment? @relation("Replies", fields: [parentId], references: [id], onDelete:Restrict, onUpdate:Cascade)
  replies      Comment[] @relation("Replies")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([sharedWorkId])
}

model Like {
  id           Int      @id @default(autoincrement())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWorkId Int
  sharedWork   SharedWork @relation(fields: [sharedWorkId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([userId, sharedWorkId]) // User can only like a work once
  @@index([userId])
  @@index([sharedWorkId])
}

// PickBuyÁî®„ÅÆ„É¢„Éá„É´ËøΩÂä†
model Product {
  id              String      @id @default(cuid())
  name            String
  description     String      @db.Text
  price           Float
  images          String[]    // ÂïÜÂìÅÁîªÂÉè„ÅÆURLÈÖçÂàó
  stock           Int         @default(0)
  category        String
  tags            String[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String      // Ë£Ω‰ΩúËÄÖ/Ë≤©Â£≤ËÄÖID
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  regionId        String
  region          Region      @relation(fields: [regionId], references: [id])
  
  // „É™„É¨„Éº„Ç∑„Éß„É≥
  livestreams     LiveStream[]
  orders          OrderItem[]
  reviews         Review[]
  
  @@index([userId])
  @@index([category])
  @@index([regionId])
}

model LiveStream {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  scheduledStartTime DateTime
  actualStartTime DateTime?
  endTime         DateTime?
  thumbnailUrl    String?
  recordingUrl    String?   // ÈÖç‰ø°ÁµÇ‰∫ÜÂæå„ÅÆÈå≤ÁîªURL
  status          String    @default("scheduled") // scheduled, live, ended, cancelled
  viewCount       Int       @default(0)
  likeCount       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // ËøΩÂä†„Éï„Ç£„Éº„É´„Éâ
  orientation     String    @default("vertical") // vertical, horizontal
  qualitySetting  String    @default("auto")     // auto, low, medium, high
  visibility      String    @default("public")   // public, unlisted, private
  commentEnabled  Boolean   @default(true)       // „Ç≥„É°„É≥„ÉàË®±ÂèØ
  commentModeration Boolean  @default(false)     // „Ç≥„É°„É≥„Éà„É¢„Éá„É¨„Éº„Ç∑„Éß„É≥
  notifyFollowers Boolean   @default(true)       // „Éï„Ç©„É≠„ÉØ„Éº„Å´ÈÄöÁü•
  notifyTiming    Int       @default(15)         // ÈÄöÁü•„Çø„Ç§„Éü„É≥„Ç∞ÔºàÂàÜÂâçÔºâ
  tags            String[]  // ÈÖç‰ø°„Çø„Ç∞
  shopUrl         String?   // Â§ñÈÉ®EC„Çµ„Ç§„ÉàURLÔºàË©≤ÂΩì„Åô„ÇãÂ†¥ÂêàÔºâ
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String    // ÈÖç‰ø°ËÄÖID
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productIds      String[]  // Èñ¢ÈÄ£ÂïÜÂìÅID
  products        Product[]
  
  // „É™„É¨„Éº„Ç∑„Éß„É≥
  chatMessages    ChatMessage[]
  
  @@index([userId])
  @@index([status])
  @@index([scheduledStartTime])
}

model ChatMessage {
  id              String    @id @default(cuid())
  content         String
  createdAt       DateTime  @default(now())
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  livestreamId    String
  livestream      LiveStream @relation(fields: [livestreamId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([livestreamId])
}

model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  totalAmount     Float
  status          String    @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentStatus   String    @default("unpaid")  // unpaid, paid, refunded
  paymentMethod   String
  shippingAddress Json
  shippingMethod  String
  trackingNumber  String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String    // Ë≥ºÂÖ•ËÄÖID
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // „É™„É¨„Éº„Ç∑„Éß„É≥
  orderItems      OrderItem[]
  
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id              String    @id @default(cuid())
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  createdAt       DateTime  @default(now())
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([productId])
}

model Review {
  id              String    @id @default(cuid())
  rating          Int       // 1-5„ÅÆË©ï‰æ°
  comment         String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String    // „É¨„Éì„É•„ÉºÊäïÁ®øËÄÖID
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String    // „É¨„Éì„É•„ÉºÂØæË±°ÂïÜÂìÅID
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([productId])
}

model Region {
  id              String    @id @default(cuid())
  name            String    @unique
  prefecture      String
  description     String?   @db.Text
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // „É™„É¨„Éº„Ç∑„Éß„É≥
  products        Product[]
  
  @@index([name])
  @@index([prefecture])
}

model Analytics {
  id              String    @id @default(cuid())
  date            DateTime
  pageViews       Int       @default(0)
  uniqueVisitors  Int       @default(0)
  conversionRate  Float?
  averageOrderValue Float?
  totalSales      Float     @default(0)
  topProducts     Json?     // ‰∏ä‰ΩçÂïÜÂìÅ„ÅÆÈÖçÂàó
  userDemographics Json?    // „É¶„Éº„Ç∂„ÉºÂ±§„Éá„Éº„Çø
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Èñ¢ÈÄ£ÊÉÖÂ†±
  userId          String?   // Ë≤©Â£≤ËÄÖID„Åå„ÅÇ„ÇãÂ†¥Âêà
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([date])
}
